# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/
# For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  springboot-api:
    image: server-springboot-api
    build:
      context: ..
      dockerfile: ./server/Dockerfile
    ports:
      - "8081:8081"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      # TODO: ( MAKE THIS MODULAR -- NO HARDCODED SENSITIVE DATA )
      - SPRING_DATA_MONGODB_URI=mongodb+srv://KNG-Jay:Iwaki0CjkHTtiHTt@clustermain.uljbnaj.mongodb.net/ClusterMain?retryWrites=true&w=majority
      - SPRING_PROFILES_ACTIVE=dev
        #PORT: "8081"
    networks:
      - app-network

networks:
  app-network:
    #driver: host
    driver: bridge



#  mongo:
#    image: mongo:latest
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=KNG-Jay
#      - MONGO_INITDB_ROOT_PASSWORD=Iwaki0CjkHTtiHTt
#      - MONGO_URL=mongodb+srv://KNG-Jay:Iwaki0CjkHTtiHTt@clustermain.uljbnaj.mongodb.net/?retryWrites=true&w=majority&appName=ClusterMain
#    ports:
#      - "27017:27017"
#    volumes:
#      - ./data/db:/data/db

    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
